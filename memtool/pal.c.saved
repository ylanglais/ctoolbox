
/*    
    This code is under GPL. Please read license terms and conditions at http://www.gnu.org/

    Yann LANGLAIS

    Changelog:
    
*/   

#include <stdlib.h>
#include <stddef.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <strings.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <stdio.h>

#include <err.h>

char pal_NAME[]    = "pal: persistant allocator based on memory mapped file";
char pal_VERSION[] = "1.0.0";
char pal_DATEVER[] = "08/04/2010";


static char pal_MAGIC[]  = "PaLlOc_";
static long pal_FMTVER = 0xFF000001;

typedef struct {
	char 	magic[8];
	long 	fmtver;
	char 	hostname[64];
	pid_t   pid;
	uid_t   uid;
	size_t  size;
	size_t  tsize;
	int 	fid;
	int 	lock;
	int     userlock;
} pal_hdr_t, *ppal_hdr_t;

typedef struct {
	pal_hdr_t hdr;
	char     data[8];
} pal_t, *ppal_t;
	
#if 0
#define _pal_c_
#include "pal.h"
#undef  _pal_c_
#endif 

size_t pal_sizeof()     { return sizeof(pal_t); }
size_t pal_hdr_sizeof() { return sizeof(pal_hdr_t); }

static ppal_hdr_t _pal_hdr_(void *p) { return (ppal_hdr_t) ((char *) p - offsetof(pal_t, data)); }

static void pal_hdr_dump(void *p) {
	ppal_hdr_t h;
	if (!p) {
		err_warning("Null pal pointer, ignored");
		return;
	}
	
	h = _pal_hdr_(p);
	err_debug("ppal :     %X", h);
	err_debug("magic :   \"%s\"", h->magic);
	err_debug("fmtver:    %X", h->fmtver);
	err_debug("hostname: \"%s\"", h->hostname);
    err_debug("pid :      %u", h->pid);
    err_debug("uid :      %u", h->uid);
    err_debug("size :     %u", h->size);
    err_debug("tsize :    %u", h->tsize);
    err_debug("fid :      %d", h->fid);
    err_debug("lock :     %d", h->lock);
	err_debug("userlock:  %d", h->userlock);
	err_debug("data:      %X", ((ppal_t) h)->data);
	err_debug("data:     \"%s\"", (char *) ((ppal_t) h)->data);

	return;
}

#if 0

static void
_pal_lock_(ppal_t pal) {
	if (pal) {
		while (pal->hdr->lock);
		pal->hdr->lock = 0;
	}
}

static void 
_pal_unlock_(ppal_t pal) {
	if (pal->lock) pal->lock = 0;
}

static int
_pal_resize_(ppal_t pal, int delta) {
	char *p;
	if (!pal || !pal->data)      return 1;
	ftruncate(pal->fid, pal->size + delta);
	if (!(p = mmap(pal->data, pal->size + delta, 0, MAP_SHARED, pal->fid, 0))) 
		                         return 2;
	if (p != pal->data)          return 3;
/*	printf("oldsize = %d\n", pal->size); */
	pal->size += delta;
/*	printf("newsize = %d\n", pal->size); */
	return 0;
}

#endif

ppal_t
pal_destroy(void *p) {
	ppal_hdr_t h;
	if (p) {
		h = _pal_hdr_(p);

		if (h->fid > 0) {
			int fid;
			size_t tsize;
			
			fid    = h->fid;
			tsize  = h->tsize;
			h->fid = -1;
			msync(h, h->tsize, MS_SYNC);
			munmap((void *) h, tsize);
			close(fid);
		}
	}
	return NULL;
}

#if 0
void
pal_user_lock(ppal_t p) {
	ppal_hdr_t h;
	if (!p) return;
	h = _pal_hdr_(p);
	while (h->userlock != 0) h->userlock = 1;
}

void
pal_user_unlock(ppal_t p) {
	ppal_hdr_t h;
	if (!p) return;
	h = _pal_hdr_(p);
	h->userlock = 0;
}
#endif

int
pal_reset_usage(char *filename) {
	return 0;
}
	
void *
pal_new(char *filename, size_t size) {
	int isnew = 0;
	ppal_t pal;
	ppal_hdr_t h;
	struct stat stats;
	int fid;
	size_t tsize;

	/* Check if file exists or not: */
	if  (stat(filename, &stats)) {
		isnew = 1;
		tsize = sizeof(pal_t) - 8 * sizeof(char) + size;
	} else tsize = stats.st_size;

	if ((fid = open(filename, O_RDWR | O_SYNC | O_CREAT, 00640)) < 0) {
		return NULL;
	}

	if (isnew) {
		if (ftruncate(fid, tsize)) {
			perror(strerror(errno));
			close(fid);
			return NULL;
		}

		if (!(h = (ppal_hdr_t) mmap(NULL, tsize, PROT_READ | PROT_WRITE, MAP_SHARED, fid, 0))) {
			perror(strerror(errno));
			close(fid);
			return NULL;
		}
		strcpy(h->magic, pal_MAGIC);	
		h->fmtver = pal_FMTVER; 
		gethostname(h->hostname,64);	
		h->uid   = getuid();
		h->pid   = getpid();
		h->fid   = fid;
		h->tsize = tsize;
		h->size  = size;
		h->lock  = 0;
		h->userlock = 0;

	} else {
		if (!(h = (ppal_hdr_t) mmap(NULL, tsize, PROT_READ | PROT_WRITE, MAP_SHARED, fid, 0))) {
			return pal_destroy(pal);
		}

		/* post mapping check list */
		if (strcmp(h->magic, pal_MAGIC)) { 
			err_error("%s is a squib", filename);
			munmap(pal, tsize);
			close(fid);
			return NULL;
		}

		if ((h->fid != -1)) {
			err_error("file %s seems to be already in use by uid %d on %s pid %d. If not the case, reset usage.", 
				filename, h->uid, h->hostname, h->pid);
			munmap(pal, tsize);
			close(fid);
			return NULL;
		}
	}

	return (void *) ((ppal_t) h)->data;
}

int
main(void) {
	char *p;

	err_init(NULL, err_DEBUG);

	printf("Try to create 1 MB persistant storage file\n");
	if (!(p = pal_new("paltest.mem", 1024 * 1024))) {
		printf("cannot allocate persistant memory\n");
		return 1;
	}
		
	pal_hdr_dump(p);
	
	printf("copy \"0123456789\" to persistant storage\n");
	strcpy(p, "0123456789");

	printf("close persistant storage\n");
	p = (char *) pal_destroy(p);

	printf("reopen persistant storage\n");
	if (!(p = pal_new("paltest.mem", 0))) {
		printf("cannot reopent presistant storage\n");
		return 2;
	}

	printf("persistant storage contains \"%s\"\n", p);
	pal_hdr_dump(p);
	
	return (int) pal_destroy(p);
}
	
#if 0	

static size_t
pal_size_get(ppal_t pal) {
	if (pal) return pal->size;
	return 0;
}

static char *
pal_data_get(ppal_t pal) {
	if (!pal || !pal->data) return NULL;
	if (pal)                return pal->data;
	return NULL;
}

/*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*/

void *
palloc(char *filename, size_t size) {
	ppal_t p;
	if (!(p = pal_new(filename, size)))
		return O
	return p->data;
}

void *
prealloc(void *ptr, size_t size) {
	return pal_size_set(ptr - pal_sizeof(), size);
}

void 
pfree(void *ptr) {
	pal_destroy(ptr - pal_sozeof());
}

void *
preload(char *filename) {
}

/*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*/

#ifdef _test_pal_

#include <stdio.h>
#include <errno.h>

static char orig[] = "012345678901234567890";
static char file[] = "pal_test.data";

void
write_orig() {
	int f;
	f = open(file, O_WRONLY | O_CREAT | O_TRUNC, 0640);
	write(f, orig, strlen(orig));
	close(f);
}

void 
cat_orig() {
	int f;
	char *buf;
	struct stat stats;
	if (!stat(file, &stats)) {
		if ((buf = (char *) malloc(stats.st_size))) {
			memset(buf, 0, stats.st_size);
			f = open(file, O_RDONLY);
			read(f, buf, stats.st_size);
			write(1, buf, stats.st_size);
			write(1, "\n", 1);
			free(buf);
		}
	}
	close(f);
}
	
void 
size_orig() {
	struct stat stats;
	if (!stat(file, &stats)) {
		printf("size = %d\n", stats.st_size);
	}
}

#define echo_cmd(x) { printf(">>> perform command: %s\n", #x); x; }

int 
main(void) {
	char *p;
	ppal_t pal;
	char *str1="hahaha";
	int i;

	echo_cmd(write_orig());
	echo_cmd(cat_orig());
	echo_cmd(pal = pal_new(file, 0));
	echo_cmd(p   = pal_data_get(pal));
	echo_cmd(pal_insert_at(pal, p, str1, strlen(str1)));
	echo_cmd(size_orig());
	echo_cmd(cat_orig());	
	echo_cmd(pal_delete_at(pal, p, 6)); 
	echo_cmd(size_orig());
	echo_cmd(cat_orig());
	echo_cmd(pal_replace_at(pal, p+10, "iiiiii", 5, 6));
	echo_cmd(size_orig());
	echo_cmd(cat_orig());
	echo_cmd(pal_insert_at(pal, p, "ohohoh", 6));
	echo_cmd(pal_destroy(pal));
	echo_cmd(size_orig());
	echo_cmd(cat_orig());
	return 0;
}
#endif 
#endif
